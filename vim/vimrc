set nocompatible
syntax enable

call plug#begin('~/.vim/plugged')
"
"   " Make sure you use single quotes
"
"   " Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'
"
"   " Any valid git URL is allowed
"   Plug 'https://github.com/junegunn/vim-github-dashboard.git'
"
"   " Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
"
"   " On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
"
"   " Using a non-master branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
"
"   " Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
"Plug 'fatih/vim-go', { 'tag': '*' }
"
"   " Plugin options
"Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
"
"   " Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
"
"   " Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'
"
"   " Universal-ctags plugin (manually installed and updated)
Plug 'universal-ctags/ctags'
"
"   " vim-gutentags plugin (manually installed and updated)
Plug 'ludovicchabant/vim-gutentags'
"
Plug 'Valloric/YouCompleteMe'

"   " Initialize plugin system
call plug#end()

filetype on
set mouse=a
set number
set shiftwidth=4
set softtabstop=4
set tabstop=4
"set noexpandtab
set expandtab
set list lcs=tab:>-
"set ic
set cindent
set smartindent
set autoindent
set hls

"ctags
set tags=./.tags;,.tags
"map <F5> :!ctags --ouput-fomat=e-ctags --exclude=.git -R --c++-kinds=+p --c-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
"imap <F5> <ESC> :!ctags --output-format=e-ctags --exclude=.git -R --c++-kinds=+p --c-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>

"taglist
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Auto_Open=1
let Tlist_Use_Right_Window=1
map <silent> <F6> :TlistToggle<CR>

"gutentags
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
let g:gutentags_ctags_tagfile = '.tags'
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

if !isdirectory(s:vim_tags)
	silent! call mkdir(s:vim_tags, 'p')
endif

"vim-easy-align
"Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
"Start interactive EasyAlign for a motion/text object (e.g.gaip)
nmap ga <Plug>(EasyAlign)

"NERDTree
map <c-n> :NERDTreeToggle<CR>
"close vim if the only window left open is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"YCM
"highlight PMenu ctermfg=0 ctermbg=223 guifg=#000000 guibg=#ffdfaf
"highlight PMenuSel ctermfg=242 ctermbg=50 guifg=Yellow3 guibg=Grey
let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifier_from_comments_and_strings = 1
let g:ycm_complete_in_strings = 1
let g:ycm_key_invoke_completion = '<c-z>'
set completeopt=menu,menuone
"let g:ycm_add_preview_to_completeopt = 0
noremap <c-z> <NOP>
let g:ycm_semantic_triggers = {
			\'c,cpp,python,go': ['re!\w{2}'],
			\}
